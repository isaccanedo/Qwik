---
source: packages/qwik/src/optimizer/core/src/test.rs
expression: output
---
==INPUT==


import { componentQrl, inlinedQrl, useLexicalScope, useHostElement, useStore, useWatchQrl, noSerialize, Host, SkipRerender, implicit$FirstArg } from '@builder.io/qwik';
import { jsx, Fragment } from '@builder.io/qwik/jsx-runtime';
import { isBrowser, isServer } from '@builder.io/qwik/build';

function qwikifyQrl(reactCmpQrl) {
    return /*#__PURE__*/ componentQrl(inlinedQrl((props)=>{
        const [reactCmpQrl] = useLexicalScope();
        const hostElement = useHostElement();
        const store = useStore({});
        let run;
        if (props['client:visible']) run = 'visible';
        else if (props['client:load'] || props['client:only']) run = 'load';
        useWatchQrl(inlinedQrl(async (track)=>{
            const [hostElement, props, reactCmpQrl, store] = useLexicalScope();
            track(props);
            if (isBrowser) {
                if (store.data) store.data.root.render(store.data.client.Main(store.data.cmp, filterProps(props)));
                else {
                    const [Cmp, client] = await Promise.all([
                        reactCmpQrl.resolve(),
                        import('./client-f762f78c.js')
                    ]);
                    let root;
                    if (hostElement.childElementCount > 0) root = client.hydrateRoot(hostElement, client.Main(Cmp, filterProps(props), store.event));
                    else {
                        root = client.createRoot(hostElement);
                        root.render(client.Main(Cmp, filterProps(props)));
                    }
                    store.data = noSerialize({
                        client,
                        cmp: Cmp,
                        root
                    });
                }
            }
        }, "qwikifyQrl_component_useWatch_x04JC5xeP1U", [
            hostElement,
            props,
            reactCmpQrl,
            store
        ]), {
            run
        });
        if (isServer && !props['client:only']) {
            const jsx$1 = Promise.all([
                reactCmpQrl.resolve(),
                import('./server-9ac6caad.js')
            ]).then(([Cmp, server])=>{
                const html = server.render(Cmp, filterProps(props));
                return /*#__PURE__*/ jsx(Host, {
                    dangerouslySetInnerHTML: html
                });
            });
            return /*#__PURE__*/ jsx(Fragment, {
                children: jsx$1
            });
        }
        return /*#__PURE__*/ jsx(Host, {
            children: /*#__PURE__*/ jsx(SkipRerender, {})
        });
    }, "qwikifyQrl_component_zH94hIe0Ick", [
        reactCmpQrl
    ]), {
        tagName: 'qwik-wrap'
    });
}
const filterProps = (props)=>{
    const obj = {};
    Object.keys(props).forEach((key)=>{
        if (!key.startsWith('client:')) obj[key] = props[key];
    });
    return obj;
};
const qwikify$ = implicit$FirstArg(qwikifyQrl);

async function renderToString(rootNode, opts) {
    const mod = await import('./server-9ac6caad.js');
    const result = await mod.renderToString(rootNode, opts);
    const styles = mod.getGlobalStyleTag(result.html);
    const finalHtml = styles + result.html;
    return {
        ...result,
        html: finalHtml
    };
}

export { qwikify$, qwikifyQrl, renderToString };
        
============================= qwikifyqrl_component_usewatch_x04jc5xep1u.js (ENTRY POINT)==

import { filterProps } from "../node_modules/@builder.io/qwik-react/index.qwik";
import { isBrowser } from "@builder.io/qwik/build";
import { noSerialize } from "@builder.io/qwik";
import { useLexicalScope } from "@builder.io/qwik";
export const qwikifyQrl_component_useWatch_x04JC5xeP1U = async (track)=>{
    const [hostElement, props, reactCmpQrl, store] = useLexicalScope();
    track(props);
    if (isBrowser) {
        if (store.data) store.data.root.render(store.data.client.Main(store.data.cmp, filterProps(props)));
        else {
            const [Cmp, client] = await Promise.all([
                reactCmpQrl.resolve(),
                import("../node_modules/@builder.io/qwik-react/client-f762f78c.js")
            ]);
            let root;
            if (hostElement.childElementCount > 0) root = client.hydrateRoot(hostElement, client.Main(Cmp, filterProps(props), store.event));
            else {
                root = client.createRoot(hostElement);
                root.render(client.Main(Cmp, filterProps(props)));
            }
            store.data = noSerialize({
                client,
                cmp: Cmp,
                root
            });
        }
    }
};
import { handleWatch as hW } from "@builder.io/qwik";
hW.issue123 && hW.issue123();
export { hW as handleWatch };

/*
{
  "origin": "../node_modules/@builder.io/qwik-react/index.qwik.js",
  "name": "qwikifyQrl_component_useWatch_x04JC5xeP1U",
  "entry": null,
  "displayName": "qwikifyQrl_component_useWatch",
  "hash": "x04JC5xeP1U",
  "canonicalFilename": "qwikifyqrl_component_usewatch_x04jc5xep1u",
  "extension": "js",
  "parent": "qwikifyQrl_component_zH94hIe0Ick",
  "ctxKind": "function",
  "ctxName": "useWatch$",
  "captures": true,
  "loc": [
    701,
    1754
  ]
}
*/
============================= qwikifyqrl_component_zh94hie0ick.js (ENTRY POINT)==

import { Fragment } from "@builder.io/qwik/jsx-runtime";
import { Host } from "@builder.io/qwik";
import { SkipRerender } from "@builder.io/qwik";
import { filterProps } from "../node_modules/@builder.io/qwik-react/index.qwik";
import { isServer } from "@builder.io/qwik/build";
import { jsx } from "@builder.io/qwik/jsx-runtime";
import { qrl } from "@builder.io/qwik";
import { useHostElement } from "@builder.io/qwik";
import { useLexicalScope } from "@builder.io/qwik";
import { useStore } from "@builder.io/qwik";
import { useWatchQrl } from "@builder.io/qwik";
export const qwikifyQrl_component_zH94hIe0Ick = (props)=>{
    const [reactCmpQrl] = useLexicalScope();
    const hostElement = useHostElement();
    const store = useStore({});
    let run;
    if (props['client:visible']) run = 'visible';
    else if (props['client:load'] || props['client:only']) run = 'load';
    useWatchQrl(qrl(()=>import("./qwikifyqrl_component_usewatch_x04jc5xep1u")
    , "qwikifyQrl_component_useWatch_x04JC5xeP1U", [
        hostElement,
        props,
        reactCmpQrl,
        store
    ]), {
        run
    });
    if (isServer && !props['client:only']) {
        const jsx$1 = Promise.all([
            reactCmpQrl.resolve(),
            import("../node_modules/@builder.io/qwik-react/server-9ac6caad.js")
        ]).then(([Cmp, server])=>{
            const html = server.render(Cmp, filterProps(props));
            return /*#__PURE__*/ jsx(Host, {
                dangerouslySetInnerHTML: html
            });
        });
        return /*#__PURE__*/ jsx(Fragment, {
            children: jsx$1
        });
    }
    return /*#__PURE__*/ jsx(Host, {
        children: /*#__PURE__*/ jsx(SkipRerender, {})
    });
};

/*
{
  "origin": "../node_modules/@builder.io/qwik-react/index.qwik.js",
  "name": "qwikifyQrl_component_zH94hIe0Ick",
  "entry": null,
  "displayName": "qwikifyQrl_component",
  "hash": "zH94hIe0Ick",
  "canonicalFilename": "qwikifyqrl_component_zh94hie0ick",
  "extension": "js",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "component$",
  "captures": true,
  "loc": [
    380,
    2573
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-react/index.qwik.js ==

import { qrl } from "@builder.io/qwik";
import { componentQrl, implicit$FirstArg } from '@builder.io/qwik';
function qwikifyQrl(reactCmpQrl) {
    return /*#__PURE__*/ componentQrl(qrl(()=>import("../../../src/qwikifyqrl_component_zh94hie0ick")
    , "qwikifyQrl_component_zH94hIe0Ick", [
        reactCmpQrl
    ]), {
        tagName: 'qwik-wrap'
    });
}
const filterProps = (props)=>{
    const obj = {};
    Object.keys(props).forEach((key)=>{
        if (!key.startsWith('client:')) obj[key] = props[key];
    });
    return obj;
};
const qwikify$ = implicit$FirstArg(qwikifyQrl);
async function renderToString(rootNode, opts) {
    const mod = await import('./server-9ac6caad.js');
    const result = await mod.renderToString(rootNode, opts);
    const styles = mod.getGlobalStyleTag(result.html);
    const finalHtml = styles + result.html;
    return {
        ...result,
        html: finalHtml
    };
}
export { qwikify$, qwikifyQrl, renderToString };
export { filterProps };

== DIAGNOSTICS ==

[]
